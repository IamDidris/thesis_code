The attached files is a collection used for implementing and testing various quantization techniques. 
compand.c provides functions for log-based compression and expansion, most notably µ-law (mu-law) companding for both real and complex signals. 
These methods reduce dynamic range by applying a logarithmic transform and can later restore an approximation of the original signals. 
The accompanying quantizer files—quantizer.proto.c, quantizercf.c, quantizerf.c, and quantizer.inline.c—handle the process of converting floating-point or complex samples to fixed-bit 
representations (ADC) and back again (DAC). 
By swapping in different “compander types,” such as linear or mu-law, users can alter the way signals are scaled before quantizing. 
The quantizer.inline.c file implements inline routines for quantize_adc and quantize_dac, which map signals to a specified number of bits in the range [-1, 1]. 
Meanwhile, quantizer.proto.c defines a structured quantizer object that can be extended to handle various input ranges, channel widths, and companding methods. 
The quantizercf.c and quantizerf.c files specialize these routines for complex and real-valued data, respectively, linking to the same underlying library (liquid.internal.h) that handles 
configuration and error reporting.